# -*- coding: utf-8 -*-
"""classification_by_suraj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ohbmxkBKt_pNh7PY4OrEDtB7DdkQdxYy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/Round Winner Prediction/csgo_round_snapshots.csv'

df = pd.read_csv(path)

df.head()

df.info()

df.columns

df.isnull().sum().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df.info()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

for k in df.columns:
  if df[k].dtype=='object' or df[k].dtype =='bool':
    df[k]=le.fit_transform(df[k])

# df['map']=le.fit_transform(df['map'])
# df['bomb_planted']=le.fit_transform(df['bomb_planted'])
# df['round_winner']=le.fit_transform(df['round_winner'])

df.info()

# data is splited here in terms of dependent and independent feature
X = df.iloc[:,:-1]
y = df['round_winner']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=34)

X_train

X_test

y_train

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train

X_test

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()
lda.fit(X_train, y_train)

lda.transform(X_test)

lda.coef_

lda_coef = np.exp(np.abs(lda.coef_))
lda_coef

lda_coef=lda_coef.flatten()  #used to convert any dimention array into 1d array
lda_coef

feature_names=X.columns
feature_names

df_features_imp =pd.DataFrame({'Features':feature_names,'imp_value':lda_coef})
df_features_imp

top_20_fea=df_features_imp.nlargest(20,'imp_value')
#nlargest(n,colname) -->used to get top n vaalues based on colname
top_20_fea

imp_col=top_20_fea.index
imp_col

X_train[:,[8,17,7]]

X_train = X_train[:,imp_col]
X_train

X_test = X_test[:,imp_col]
X_test

"""# Logistic regression -75"""

from sklearn.linear_model import LogisticRegression
model_lg=LogisticRegression()
model_lg.fit(X_train,y_train)

y_pred=model_lg.predict(X_test)

from sklearn.metrics import *
accuracy_score(y_test,y_pred)

confusion_matrix(y_test,y_pred)

"""
# Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
model_dt=DecisionTreeClassifier()
model_dt.fit(X_train,y_train)

y_pred=model_dt.predict(X_test)

accuracy_score(y_test,y_pred)

"""# Random Forest -->85"""

from sklearn.ensemble import RandomForestClassifier
model_rf=RandomForestClassifier()
model_rf.fit(X_train,y_train)

y_pred=model_rf.predict(X_test)

accuracy_score(y_test,y_pred)

confusion_matrix(y_test,y_pred)